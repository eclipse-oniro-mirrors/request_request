# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
rust_cxx("request_predownload_native_rust_gen") {
  sources = [ "src/download/wrapper.rs" ]
}

ohos_rust_static_ffi("request_predownload_native_rust") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  features = [ "ohos" ]

  sources = [ "src/lib.rs" ]
  deps = [
    "../../request_utils:request_utils",
    "../netstack_rs:netstack_rs",
    "//third_party/rust/crates/cxx:lib",
  ]
  external_deps = [ "hilog:hilog_rust" ]

  subsystem_name = "request"
  part_name = "request"
}

config("request_predownload_native_config") {
  include_dirs = [
    "include",
    "${target_gen_dir}/src",
    "../../interfaces/inner_kits/predownload/include",
  ]
}

ohos_shared_library("request_predownload_native") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  stack_protector_ret = true

  public_configs = [ ":request_predownload_native_config" ]

  sources = [ "src/cxx/pre_download.cpp" ]
  sources += get_target_outputs(":request_predownload_native_rust_gen")
  deps = [
    ":request_predownload_native_rust",
    ":request_predownload_native_rust_gen",
    "//third_party/rust/crates/cxx:cxx_cppdeps",
  ]

  subsystem_name = "request"
  part_name = "request"
}

ohos_static_library("request_predownload_native_static") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  stack_protector_ret = true

  public_configs = [ ":request_predownload_native_config" ]

  sources = [ "src/cxx/pre_download.cpp" ]
  sources += get_target_outputs(":request_predownload_native_rust_gen")
  deps = [
    ":request_predownload_native_rust_gen",
    "//third_party/rust/crates/cxx:cxx_cppdeps",
  ]

  subsystem_name = "request"
  part_name = "request"
}

ohos_rust_unittest("rust_request_predownload_native_ut_test") {
  module_out_path = "request/predownload"

  sources = [ "src/lib.rs" ]

  external_deps = []

  rustflags = [ "--cfg=feature=\"ohos\"" ]

  deps = [
    ":request_predownload_native_static",
    "../../request_utils:request_utils",
    "../netstack_rs:netstack_rs",
    "//third_party/rust/crates/cxx:lib",
  ]
  external_deps = [ "hilog:hilog_rust" ]

  subsystem_name = "request"
  part_name = "request"
}
